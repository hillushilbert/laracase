<?php

namespace DummyNamespace;

use DummyRootNamespaceHttp\Requests;
use DummyRootNamespaceHttp\Controllers\Controller;

use DummyRootNamespace{{modelNamespace}}{{modelName}};
use Illuminate\Http\Request;

class DummyClass extends Controller
{
	
	protected $gridFields = [
		{{gridFields}}
	];
	
    public function __construct(){
		{{middlewareAuth}}
	}
	
	/**
     * Display a listing of the resource.
     *
     * @return \Illuminate\View\View
     */
    public function index(Request $request)
    {
		${{crudName}} = [];
        
        {{lookups}}
		return view('{{viewPath}}{{viewName}}.index',compact('{{crudName}}'{{compactLookups}}));
    }

	
    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\View\View
     */
    public function create()
    {
        return view('{{viewPath}}{{viewName}}.create');
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function store(Request $request)
    {
        {{validationRules}}
        $requestData = $request->all();
        {{createAt}}
        {{updateAt}}
        {{fileSnippet}}
        ${{crudNameSingular}} = {{modelName}}::create($requestData);
		return response()->json(${{crudNameSingular}});		
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     *
     * @return \Illuminate\View\View
     */
    public function show(Request $request, $id)
    {
        if($id == 'ajax')
		{	
			$start = $request->get('start',0);
			$length = $request->get('length',10);
			$keyword = $request->get('search')['value'];
			$draw = $request->get('draw',1);
			$order = $request->get('order',false);
			
			$oModel = new {{modelName}};
			
			if (!empty($keyword)) {
				$oModel = $oModel->{{whereSnippet}};
			}
			$recordsTotal = $oModel->count();
			
			$oModel = $oModel->offset($start)->limit($length);
			
			if (!empty($order)) {
				$oModel = $oModel->orderBy($this->gridFields[$order[0]['column']],$order[0]['dir']);
			}
			
			${{crudName}} = $oModel->get();
			
			$ret = [
				"draw" => $draw,
				"iTotalDisplayRecords" => $recordsTotal,
				"iTotalRecords" => ${{crudName}}->count(),
				'aaData' => []
			];
			
			foreach(${{crudName}} as $idx => $p){
				$rec = [];
				foreach($this->gridFields as $f){
					$rec[] = $p->$f;
				}
				$rec["DT_RowId"] = $p->{{primaryKey}};
				//$ret['aaData'][] = $rec;
				$ret['aaData'][] = $p;
			}
			
			return response()->json($ret);
		}else{
			
			${{crudNameSingular}} = {{modelName}}::findOrFail($id);
			return response()->json(${{crudNameSingular}});
		}
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     *
     * @return \Illuminate\View\View
     */
    public function edit($id)
    {
        ${{crudNameSingular}} = {{modelName}}::findOrFail($id);

        return view('{{viewPath}}{{viewName}}.edit', compact('{{crudNameSingular}}'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @param  int  $id
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function update(Request $request, $id)
    {
        {{validationRules}}
        $requestData = $request->all();
        {{updateAt}}
        {{fileSnippet}}
        ${{crudNameSingular}} = {{modelName}}::findOrFail($id);
        ${{crudNameSingular}}->update($requestData);

		return response()->json(${{crudNameSingular}});
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function destroy($id)
    {
	
	    try
		{
			{{modelName}}::destroy($id);
			
			return redirect('{{routeGroup}}{{viewName}}')->with('flash_message', '{{modelName}} removido!');
		
		}
		catch(\Exception $e)
		{
			//if email or phone exist before in db redirect with error messages
            return redirect()->back()->withErrors([$e->getMessage()]);
        }
	
	}
}
